# We use a generic table for caching raw objects
# 
# cif_idl purpose
#     store the IDL for messages we record.
#     occasionally the IDL is expected to change, we want to
#     be able to parse old messages. for posterity, the specific
#     message format will be stored here. If a message is stored
#     in 'cif_objs' of type "CIF.msg.MessageType" with a version of
#     20120601 and the version we have available is 20120701, we can
#     go to this table, retrieve the old version, and parse the message.
#
#     rowkey $version-$type   (eg "20120601-CIF.msg.MessageType")
#     cf:$idltype             (eg "pb2" = [textual obj definition])
#
#     that way, given the version and object type we are looking for, 
#     we can directly extract the IDL in a single lookup.
disable 'cif_idl'
drop 'cif_idl'
create 'cif_idl', {NAME=>'cf', COMPRESSION=>'SNAPPY'}

# cif_objs purpose
#     see http://opentsdb.net/schema.html
#     this table will store the raw CIF.msg.MessageType objects that
#     cif_db receives. the idea is to store the raw protocol buffers
#     and then allow other clients to retrieve them, reinstantiate them
#     and operate on them. Hbase isn't good for storing time series data
#     (Hbase Definitive Guide pg 363 "Time Series Data")
#
#     we need to spread the writes out across all of the region servers
#     so we're selecting the 'salted' approach, and the timestamps
#     will be prefixed with a random number corresponding to one of 
#     the region servers. when reading back, N threads will need to be
#     spawn to read the data and coalesce it back into a single data
#     set. see the discussion of mozilla socorro, pg 364 in the HBase book 
#
#     $salt is a 2 byte hex number, allowing for up to 0xFFFF regions
#     note the rowkey is binary to keep it small
#
#     $timestamp is an 8 byte TAI64 stamp
# 
#     to avoid collisions, a hash of the message is appended to the row
#     id
#
#     rowkey $salt$timestamp$hash   (eg "<2 byte salt><8 byte timestamp><16 byte md5>")
#     cf:$submsgtype     (eg cf:RFC5070-IODEF-v1=object)
#
#     this allows the client to quickly grab all objects in a specific
#     timeframe and of specific types.

disable 'cif_objs'
drop 'cif_objs'
create 'cif_objs', {NAME=>'cf', COMPRESSION=>'SNAPPY'}


# feed tables (indexes)
# infrastructure_botnet
# infrastructure/malware
# infrastructure/scan
# domain/botnet
# domain/malware
# url/botnet
# url/malware
# url/phishing

# feeds = infrastructure (addresses), domain, url, email, search, malware
# these categories come from Assessment.Impact.content: botnet, fastflux, malware, nameserver, phishing, scan, spamvertising, suspicious, whitelist


disable 'index_botnet'
drop 'index_botnet'
create 'index_botnet', {NAME => 'b', COMPRESSION => 'SNAPPY'}

disable 'log'
drop 'log'
create 'log', {NAME => 'b', COMPRESSION => 'SNAPPY'}



# b:uuid, b:guid, b:address, b:hash, b:confidence, b:reporttime
# questions:
#   1. search by address, above specific confidence
#   2. search by netblock
#
# rowid: $salt$address$hash
#
# this lets us search by netblock. the b:address column is moved into the rowid
# we also rightpad out the b:address field to 16 bytes, so we can handle ipv6 
# addresses transparently.
#
# b:$confidence = ?
# b:$group = $confidence


# state information
# rowid = exploder_checkpoint 
#    col = b:ts

disable 'registry'
drop 'registry'
create 'registry', { NAME => 'b', COMPRESSION => 'SNAPPY' }
put 'registry', 'exploder.checkpoint', 'b:type', 'int'
put 'registry', 'exploder.checkpoint', 'b:value', '0'
put 'registry', 'hadoop.num_servers', 'b:type', 'int'
put 'registry', 'hadoop.num_servers', 'b:value', '1'
put 'registry', 'index.primary.ipv4', 'b:type', 'int'
put 'registry', 'index.primary.ipv4', 'b:value', '0'
put 'registry', 'index.primary.ipv6', 'b:type', 'int'
put 'registry', 'index.primary.ipv6', 'b:value', '1'
put 'registry', 'index.primary.domain', 'b:type', 'int'
put 'registry', 'index.primary.domain', 'b:value', '2'
put 'registry', 'index.primary.url', 'b:type', 'int'
put 'registry', 'index.primary.url', 'b:value', '3'
put 'registry', 'index.primary.email', 'b:type', 'int'
put 'registry', 'index.primary.email', 'b:value', '4'
put 'registry', 'index.primary.search', 'b:type', 'int'
put 'registry', 'index.primary.search', 'b:value', '5'
put 'registry', 'index.primary.malware', 'b:type', 'int'
put 'registry', 'index.primary.malware', 'b:value', '6'
put 'registry', 'index.primary.asn', 'b:type', 'int'
put 'registry', 'index.primary.asn', 'b:value', '7'
put 'registry', 'index.primary.infrastructure', 'b:type', 'string'
put 'registry', 'index.primary.infrastructure', 'b:value', 'ipv4,ipv6'
put 'registry', 'index.secondary', 'b:type', 'string'
put 'registry', 'index.secondary', 'b:value', 'botnet, malware, scan, phishing'
put 'registry', 'index.primary.purge_after', 'b:type', 'string'
put 'registry', 'index.primary.purge_after', 'b:value', '270d'
put 'registry', 'index.purge_every', 'b:type', 'string'
put 'registry', 'index.purge_every', 'b:value', '24h'
put 'registry', 'hbase.batch_size', 'b:type', 'int'
put 'registry', 'hbase.batch_size', 'b:value', '5'



# API key tracking
#
# table merges the psql apikeys and apikeys_groups tables
# cf 'b' is 'base' information
# cf 'grp' is 'group' membership information
#
# to find the membership for a particular apikey, fetch the row corresponding to that key
# and examine the grp:* column names
#
# eg
#   get 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'grp:'
#
# to find all the members of a particular group, select all rows that match the
# grp:<grpid> and look at the row keys
#
# eg 
#   scan 'apikeys', {COLUMNS => ['grp:8c864306-d21a-37b1-8705-746a786719bf']}

disable 'apikeys'
drop 'apikeys'
create 'apikeys', { NAME => 'b', COMPRESSION=>'SNAPPY'}, { NAME => 'grp', COMPRESSION=>'SNAPPY'} 

put 'apikeys', 'bootstrap', 'b:apikey', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:alias', 'bootstrap'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:description', 'used during installation process, removed during installation process'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:restrictedAccess', 'False'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:writeAccess', 'True'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:defaultGroup', '8c864306-d21a-37b1-8705-746a786719bf'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:revoked', 'False'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:expires', 'never'
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'b:parent', ''
put 'apikeys', 'c31ebb50-18df-4f47-8ec9-3f7ff778114a', 'grp:8c864306-d21a-37b1-8705-746a786719bf', 'everyone'

put 'apikeys', 'cif-db', 'b:apikey', 'a8fd97c3-9f8b-477b-b45b-ba06719a0088'
put 'apikeys', 'a8fd97c3-9f8b-477b-b45b-ba06719a0088', 'b:alias', 'cif-db'
put 'apikeys', 'a8fd97c3-9f8b-477b-b45b-ba06719a0088', 'b:description', 'database interface'
put 'apikeys', 'a8fd97c3-9f8b-477b-b45b-ba06719a0088', 'b:expires', 'never'


put 'apikeys', 'cif-smrt', 'b:apikey', 'd1f2bcd1-b809-46b1-a845-782e997a7340'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:alias', 'cif-smrt'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:description', 'feed consumer, publisher'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:restrictedAccess', 'False'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:defaultGroup', '8c864306-d21a-37b1-8705-746a786719bf'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:writeAccess', 'True'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:revoked', 'False'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'b:expires', 'never'
put 'apikeys', 'd1f2bcd1-b809-46b1-a845-782e997a7340', 'grp:8c864306-d21a-37b1-8705-746a786719bf', 'everyone'



put 'apikeys', 'cif-ui', 'b:apikey', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:alias', 'cif-ui'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:description', 'UI'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:restrictedAccess', 'False'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:writeAccess', 'True'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:defaultGroup', '8c864306-d21a-37b1-8705-746a786719bf'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:revoked', 'False'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'b:expires', 'never'
put 'apikeys', 'a2fd22c2-2f2b-477b-b45b-ba06719a0088', 'grp:8c864306-d21a-37b1-8705-746a786719bf', 'everyone'


put 'apikeys', 'cif-router', 'b:apikey', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:alias', 'cif-router'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:description', 'router'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:restrictedAccess', 'False'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:writeAccess', 'True'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:defaultGroup', '8c864306-d21a-37b1-8705-746a786719bf'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:revoked', 'False'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'b:expires', 'never'
put 'apikeys', 'a1fd11c1-1f1b-477b-b45b-ba06719a0088', 'grp:8c864306-d21a-37b1-8705-746a786719bf', 'everyone'

disable 'groups'
drop 'groups'
create 'groups', { NAME => 'b', COMPRESSION=>'SNAPPY'}, { NAME => 'grp', COMPRESSION=>'SNAPPY'}

put 'groups', '8c864306-d21a-37b1-8705-746a786719bf', 'b:name', 'everyone'
put 'groups', 'everyone', 'b:uuid', '8c864306-d21a-37b1-8705-746a786719bf'
